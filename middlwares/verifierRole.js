const jwt = require('jsonwebtoken');
//verifierRoleMiddleWare

const invalidToken = require('../config/invalidToken');
const User = require('../models/user');
const Role = require('../models/Role');
function verifierRole(){

    return function(req,res,next)
    {
        const authHeader = req.headers['authorization'];//  extraction de token de l'entete  de requette sous la forme "barer token"
        //console.log(authHeader)
        const token =authHeader && authHeader.split(' ')[1]  ;
        //console.log(token);
        if(token == null) return res.sendStatus(401);
        if (invalidToken.includes(token) ){
            return res.json("session expirÃ©(logout)")
        };
        jwt.verify(token,"123456789",async(err,user)=>{
            if(err) {
                return res.json("token expirÃ©").send(401);//Utiliser return dans ce contexte permet de sortir immÃ©diatement de la fonction, empÃªchant toute exÃ©cution ultÃ©rieure du code dans cette fonction utilisez toujours return aprÃ¨s res.sendStatus() dans un middleware pour garantir une exÃ©cution correcte et prÃ©visible de votre code :.
            }
        req.user=user;
        console.log(user);
            
            try {
                // RÃ©cupÃ©rez le rÃ´le administrateur depuis la base de donnÃ©es
                const adminRole = await Role.findOne({ name: 'Admin' });
                console.log("ğŸš€ ~ jwt.verify ~ adminRole:", adminRole)
                console.log("ğŸš€ ~ jwt.verify ~ user.role:", user.role)
                if (!adminRole) {
                    return res.sendStatus(500); // RÃ´le admin non trouvÃ©
                }

                // Comparer le rÃ´le de l'utilisateur avec le rÃ´le administrateur
                 if (user.role === adminRole._id.toString()) {
                    
                    next();
                } else {
                    
                    return res.sendStatus(403); // AccÃ¨s interdit
                }


            } catch (error) {
                console.error(error);
                return res.sendStatus(500); // Erreur du serveur
            }
        });
    };
}

module.exports=verifierRole;










